{"ast":null,"code":"import _objectSpread from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Node from'./Node/Node';import{dijkstra,getNodesInShortestPathOrder}from'../algorithms/dijkstra';import'./PathfindingVisualizer.css';var START_NODE_ROW=13;var START_NODE_COL=15;var FINISH_NODE_ROW=13;var FINISH_NODE_COL=45;var PathfindingVisualizer=/*#__PURE__*/function(_Component){_inherits(PathfindingVisualizer,_Component);var _super=_createSuper(PathfindingVisualizer);function PathfindingVisualizer(){var _this;_classCallCheck(this,PathfindingVisualizer);_this=_super.call(this);_this.state={grid:[],mouseIsPressed:false};return _this;}_createClass(PathfindingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){var grid=getInitialGrid();this.setState({grid:grid});}},{key:\"handleMouseDown\",value:function handleMouseDown(row,col){var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid,mouseIsPressed:true});}},{key:\"handleMouseEnter\",value:function handleMouseEnter(row,col){if(!this.state.mouseIsPressed)return;var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid});}},{key:\"handleMouseUp\",value:function handleMouseUp(){this.setState({mouseIsPressed:false});}},{key:\"animateDijkstra\",value:function animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder){var _this2=this;var _loop=function _loop(i){if(i===visitedNodesInOrder.length){setTimeout(function(){_this2.animateShortestPath(nodesInShortestPathOrder);},10*i);return{v:void 0};}setTimeout(function(){var node=visitedNodesInOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-visited';},10*i);};for(var i=0;i<=visitedNodesInOrder.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}}},{key:\"animateShortestPath\",value:function animateShortestPath(nodesInShortestPathOrder){var _loop2=function _loop2(i){setTimeout(function(){var node=nodesInShortestPathOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-shortest-path';},50*i);};for(var i=0;i<nodesInShortestPathOrder.length;i++){_loop2(i);}var start=nodesInShortestPathOrder[0];document.getElementById(\"node-\".concat(start.row,\"-\").concat(start.col)).className='node node-start';var stop=nodesInShortestPathOrder[nodesInShortestPathOrder.length-1];document.getElementById(\"node-\".concat(stop.row,\"-\").concat(stop.col)).className='node node-finish';}},{key:\"visualizeDijkstra\",value:function visualizeDijkstra(){var grid=this.state.grid;var startNode=grid[START_NODE_ROW][START_NODE_COL];var finishNode=grid[FINISH_NODE_ROW][FINISH_NODE_COL];var visitedNodesInOrder=dijkstra(grid,startNode,finishNode);var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);this.animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder);}},{key:\"clearBoard\",value:function clearBoard(){var grid=this.state.grid;var startNode=grid[START_NODE_ROW][START_NODE_COL];var finishNode=grid[FINISH_NODE_ROW][FINISH_NODE_COL];var visitedNodesInOrder=dijkstra(grid,startNode,finishNode);for(var i=0;i<visitedNodesInOrder.length;i++){var node=visitedNodesInOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node';}var start=visitedNodesInOrder[0];document.getElementById(\"node-\".concat(start.row,\"-\").concat(start.col)).className='node node-start';var stop=visitedNodesInOrder[visitedNodesInOrder.length-1];document.getElementById(\"node-\".concat(stop.row,\"-\").concat(stop.col)).className='node node-finish';this.componentDidMount();}},{key:\"clearPath\",value:function clearPath(){var grid=this.state.grid;var startNode=grid[START_NODE_ROW][START_NODE_COL];var finishNode=grid[FINISH_NODE_ROW][FINISH_NODE_COL];var visitedNodesInOrder=dijkstra(grid,startNode,finishNode);for(var i=0;i<visitedNodesInOrder.length;i++){var node=visitedNodesInOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node';}var start=visitedNodesInOrder[0];document.getElementById(\"node-\".concat(start.row,\"-\").concat(start.col)).className='node node-start';var stop=visitedNodesInOrder[visitedNodesInOrder.length-1];document.getElementById(\"node-\".concat(stop.row,\"-\").concat(stop.col)).className='node node-finish';}},{key:\"render\",value:function render(){var _this3=this;var _this$state=this.state,grid=_this$state.grid,mouseIsPressed=_this$state.mouseIsPressed;return/*#__PURE__*/React.createElement(\"body\",null,/*#__PURE__*/React.createElement(\"div\",{class:\"navbar\"},/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",{class:\"starwarslogo\"},/*#__PURE__*/React.createElement(\"img\",{src:require('./starwars.png')}),\" \"),/*#__PURE__*/React.createElement(\"li\",{class:\"text\"},/*#__PURE__*/React.createElement(\"a\",{onClick:function onClick(){return window.location.reload();}},\" Pathfinding Visualizer\")),/*#__PURE__*/React.createElement(\"li\",{class:\"nav\"},/*#__PURE__*/React.createElement(\"a\",{onClick:function onClick(){return _this3.clearBoard();}},\"Clear Board\")),/*#__PURE__*/React.createElement(\"li\",{class:\"nav\"},/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return _this3.visualizeDijkstra();}},\"Find the Force!\")),/*#__PURE__*/React.createElement(\"li\",{class:\"nav\"},/*#__PURE__*/React.createElement(\"a\",{onClick:function onClick(){return _this3.clearPath();}},\"Clear Path\")),/*#__PURE__*/React.createElement(\"li\",{class:\"nav\"},/*#__PURE__*/React.createElement(\"a\",{onClick:function onClick(){return _this3.componentDidMount();}},\"Clear Walls\")))),/*#__PURE__*/React.createElement(\"div\",{className:\"grid\"},grid.map(function(row,rowIdx){return/*#__PURE__*/React.createElement(\"div\",{key:rowIdx},row.map(function(node,nodeIdx){var row=node.row,col=node.col,isFinish=node.isFinish,isStart=node.isStart,isWall=node.isWall;return/*#__PURE__*/React.createElement(Node,{key:nodeIdx,col:col,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:mouseIsPressed,onMouseDown:function onMouseDown(row,col){return _this3.handleMouseDown(row,col);},onMouseEnter:function onMouseEnter(row,col){return _this3.handleMouseEnter(row,col);},onMouseUp:function onMouseUp(){return _this3.handleMouseUp();},row:row});}));})),/*#__PURE__*/React.createElement(\"div\",{class:\"footer\"},/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",{class:\"f\"},/*#__PURE__*/React.createElement(\"img\",{src:require('./spaceship.png')}),\"\\xA0\\xA0\\xA0Start Node\"),/*#__PURE__*/React.createElement(\"li\",{class:\"f\"},/*#__PURE__*/React.createElement(\"img\",{src:require('./empire.png')}),\"\\xA0\\xA0\\xA0Target Node\"),/*#__PURE__*/React.createElement(\"li\",{class:\"f\"},/*#__PURE__*/React.createElement(\"img\",{src:require('./unvisited.png')}),\"\\xA0\\xA0\\xA0Unvisited Node\"),/*#__PURE__*/React.createElement(\"li\",{class:\"f\"},/*#__PURE__*/React.createElement(\"img\",{src:require('./visited.png')}),\"\\xA0\\xA0\\xA0Visited Node\"),/*#__PURE__*/React.createElement(\"li\",{class:\"f\"},/*#__PURE__*/React.createElement(\"img\",{src:require('./light.png')}),\" \\xA0\\xA0\\xA0Shortest Path Node\"),/*#__PURE__*/React.createElement(\"li\",{class:\"f\"},/*#__PURE__*/React.createElement(\"img\",{src:require('./DarthVader.png')}),\"\\xA0\\xA0\\xA0Wall Node\"))));}}]);return PathfindingVisualizer;}(Component);export{PathfindingVisualizer as default};var getInitialGrid=function getInitialGrid(){var grid=[];for(var row=0;row<25;row++){var currentRow=[];for(var col=0;col<63;col++){currentRow.push(createNode(col,row));}grid.push(currentRow);}return grid;};var createNode=function createNode(col,row){return{col:col,row:row,isStart:row===START_NODE_ROW&&col===START_NODE_COL,isFinish:row===FINISH_NODE_ROW&&col===FINISH_NODE_COL,distance:Infinity,isVisited:false,isWall:false,previousNode:null};};var getNewGridWithWallToggled=function getNewGridWithWallToggled(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];var newNode=_objectSpread({},node,{isWall:!node.isWall});newGrid[row][col]=newNode;return newGrid;};","map":{"version":3,"sources":["/home/susmitha/pathfinding-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","grid","mouseIsPressed","getInitialGrid","setState","row","col","newGrid","getNewGridWithWallToggled","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","start","stop","startNode","finishNode","animateDijkstra","componentDidMount","require","window","location","reload","clearBoard","visualizeDijkstra","clearPath","map","rowIdx","nodeIdx","isFinish","isStart","isWall","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 13;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 13;\nconst FINISH_NODE_COL = 45;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n    const start = nodesInShortestPathOrder[0];\n       document.getElementById(`node-${start.row}-${start.col}`).className =\n          'node node-start';\n      const stop = nodesInShortestPathOrder[nodesInShortestPathOrder.length-1];\n        document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          'node node-finish';\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n\n  clearBoard(){\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    for (let i =0; i<visitedNodesInOrder.length; i++){\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node';\n    }\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          'node node-start';\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length-1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          'node node-finish';\n    this.componentDidMount();\n  }\n\n  clearPath(){\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    for (let i =0; i<visitedNodesInOrder.length; i++){\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node';\n    }\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          'node node-start';\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length-1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          'node node-finish';\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <body>\n      <div class=\"navbar\">\n        <ul>\n          <li class=\"starwarslogo\"><img src={require('./starwars.png')} /> </li>\n          <li class=\"text\"><a onClick={() => window.location.reload()}> Pathfinding Visualizer</a></li>\n          <li class=\"nav\"><a onClick={() => this.clearBoard()}>\n          Clear Board\n        </a></li>\n        <li class=\"nav\"><button onClick={() => this.visualizeDijkstra()}>\n          Find the Force!\n        </button></li>\n        <li class=\"nav\"><a onClick={() => this.clearPath()}>\n          Clear Path\n        </a></li>\n        <li class=\"nav\"><a onClick={() => this.componentDidMount()}>\n          Clear Walls\n        </a></li>\n        </ul>\n      </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <div class=\"footer\">\n          <ul>\n            <li class=\"f\"><img src={require('./spaceship.png')} />&nbsp;&nbsp;&nbsp;Start Node</li>\n            <li class=\"f\"><img src={require('./empire.png')} />&nbsp;&nbsp;&nbsp;Target Node</li>\n            <li class=\"f\"><img src={require('./unvisited.png')} />&nbsp;&nbsp;&nbsp;Unvisited Node</li>\n            <li class=\"f\"><img src={require('./visited.png')} />&nbsp;&nbsp;&nbsp;Visited Node</li>\n            <li class=\"f\"><img src={require('./light.png')} /> &nbsp;&nbsp;&nbsp;Shortest Path Node</li>\n            <li class=\"f\"><img src={require('./DarthVader.png')} />&nbsp;&nbsp;&nbsp;Wall Node</li>\n          </ul>\n        </div>\n      </body>\n    );\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 25; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 63; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};"]},"metadata":{},"sourceType":"module"}