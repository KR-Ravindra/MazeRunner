{"ast":null,"code":"var _jsxFileName = \"/home/susmitha/pathfinding-visualizer/src/Visualizers/PathfinderDragon/PathfinderDragon.jsx\";\nimport React, { Component } from 'react';\nimport Node from './NodeDragon/NodeDragon';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport styles from './PathfinderDragon.module.css';\nimport nodeStyles from './NodeDragon/NodeDragon.module.css';\nconst START_NODE_ROW = 8;\nconst START_NODE_COL = 8;\nconst FINISH_NODE_ROW = 13;\nconst FINISH_NODE_COL = 35;\nexport default class PathfinderDragon extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    const start = nodesInShortestPathOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className = `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `${nodeStyles.node} ${nodeStyles.nodeVisited}`;\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `${nodeStyles.node} ${nodeStyles.nodeShortestPath}`;\n      }, 50 * i);\n    }\n\n    const start = nodesInShortestPathOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className = `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    const stop = nodesInShortestPathOrder[nodesInShortestPathOrder.length - 1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className = `${nodeStyles.node} ${nodeStyles.nodeFinish}`;\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  clearBoard() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className = `${nodeStyles.node} ${nodeStyles.node}`;\n    }\n\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className = `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length - 1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className = `${nodeStyles.node} ${nodeStyles.nodeFinish}`;\n    this.componentDidMount();\n  }\n\n  clearPath() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className = `${nodeStyles.node} ${nodeStyles.node}`;\n    }\n\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className = `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length - 1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className = `${nodeStyles.node} ${nodeStyles.nodeFinish}`;\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"body\", {\n      class: styles.body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: styles.navbar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.starwarslogo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require('../Images/dragonball.png'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 43\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => window.location.reload(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 35\n      }\n    }, \" Pathfinding Visualizer\")), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.nav,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => this.clearBoard(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 34\n      }\n    }, \"Clear Board\")), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.nav,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 32\n      }\n    }, \"Visualize Dijkstra's Algorithm\")), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.nav,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => this.clearPath(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 32\n      }\n    }, \"Clear Path\")), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.nav,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => this.componentDidMount(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 32\n      }\n    }, \"Clear Walls\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.grid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: styles.footer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require('../Images/Goku.png'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 34\n      }\n    }), \"    Start Node\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require('../Images/ball.png'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 34\n      }\n    }), \"    Target Node\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require('../Images/unvisitedS.png'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 34\n      }\n    }), \"    Unvisited Node\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require('../Images/visitedS.png'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 34\n      }\n    }), \"   Visited Node\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require('../Images/light.png'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 34\n      }\n    }), \"    Shortest Path Node\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: styles.f,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require('../Images/dragon.png'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 34\n      }\n    }), \"   Wall Node\"))));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/susmitha/pathfinding-visualizer/src/Visualizers/PathfinderDragon/PathfinderDragon.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","styles","nodeStyles","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfinderDragon","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","start","document","getElementById","className","node","nodeStart","i","length","setTimeout","animateShortestPath","nodeVisited","nodeShortestPath","stop","nodeFinish","visualizeDijkstra","startNode","finishNode","clearBoard","clearPath","render","body","navbar","starwarslogo","require","text","window","location","reload","nav","map","rowIdx","nodeIdx","isFinish","isStart","isWall","footer","f","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react';\nimport Node from './NodeDragon/NodeDragon';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\nimport styles from './PathfinderDragon.module.css';\nimport nodeStyles from'./NodeDragon/NodeDragon.module.css';\n\nconst START_NODE_ROW = 8;\nconst START_NODE_COL = 8;\nconst FINISH_NODE_ROW = 13;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfinderDragon extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    const start = nodesInShortestPathOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n        `${nodeStyles.node} ${nodeStyles.nodeVisited}`;\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 1; i < nodesInShortestPathOrder.length-1; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeShortestPath}`;\n      }, 50 * i);\n    }\n    const start = nodesInShortestPathOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    const stop = nodesInShortestPathOrder[nodesInShortestPathOrder.length-1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeFinish}`;\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n\n  clearBoard(){\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    for (let i =0; i<visitedNodesInOrder.length; i++){\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.node}`;\n    }\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length-1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeFinish}`;\n    this.componentDidMount();\n  }\n\n  clearPath(){\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    for (let i =0; i<visitedNodesInOrder.length; i++){\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.node}`;\n    }\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length-1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeFinish}`;\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <body class={styles.body}>\n      <div class={styles.navbar}>\n        <ul>\n          <li class={styles.starwarslogo}><img src={require('../Images/dragonball.png')} /> </li>\n          <li class={styles.text}><a onClick={() => window.location.reload()}> Pathfinding Visualizer</a></li>\n          <li class={styles.nav}><a onClick={() => this.clearBoard()}>\n          Clear Board\n        </a></li>\n        <li class={styles.nav}><button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button></li>\n        <li class={styles.nav}><a onClick={() => this.clearPath()}>\n          Clear Path\n        </a></li>\n        <li class={styles.nav}><a onClick={() => this.componentDidMount()}>\n          Clear Walls\n        </a></li>\n        </ul>\n      </div>\n        <div className={styles.grid}>\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <div class={styles.footer}>\n          <ul>\n            <li class={styles.f}><img src={require('../Images/Goku.png')} />    Start Node</li>\n            <li class={styles.f}><img src={require('../Images/ball.png')} />    Target Node</li>\n            <li class={styles.f}><img src={require('../Images/unvisitedS.png')} />    Unvisited Node</li>\n            <li class={styles.f}><img src={require('../Images/visitedS.png')} />   Visited Node</li>\n            <li class={styles.f}><img src={require('../Images/light.png')} />    Shortest Path Node</li>\n            <li class={styles.f}><img src={require('../Images/dragon.png')} />   Wall Node</li>\n          </ul>\n        </div>\n      </body>\n    );\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}