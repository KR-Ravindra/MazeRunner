{"ast":null,"code":"var _jsxFileName = \"/home/susmitha/pathfinding-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 15;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  clearBoard() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node node';\n    }\n\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className = 'node node-start';\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length - 1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className = 'node node-finish';\n    this.componentDidMount();\n  }\n\n  clearPath() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node node';\n    }\n\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className = 'node node-start';\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length - 1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className = 'node node-finish';\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, \"Visualize Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.componentDidMount(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, \"Clear Path\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.componentDidMount(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, \"Clear Walls\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.clearBoard(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, \"Clear Board\"));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 29; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 76; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/susmitha/pathfinding-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","clearBoard","start","stop","clearPath","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 15;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n\n  clearBoard(){\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    for (let i =0; i<visitedNodesInOrder.length; i++){\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node';\n    }\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          'node node-start';\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length-1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          'node node-finish';\n    this.componentDidMount();\n  }\n\n  clearPath(){\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    for (let i =0; i<visitedNodesInOrder.length; i++){\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node';\n    }\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          'node node-start';\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length-1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          'node node-finish';\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <button onClick={() => this.componentDidMount()}>\n          Clear Path\n        </button>\n        <button onClick={() => this.componentDidMount()}>\n          Clear Walls\n        </button>\n        <button onClick={() => this.clearBoard()}>\n          Clear Board\n        </button>\n      </>\n    );\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 29; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 76; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};"]},"metadata":{},"sourceType":"module"}